/*
 * Copyright (c) 2006-2018, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2018-11-06     SummerGift   first version
 * 2018-11-19     flybreak     add stm32f429-fire-challenger bsp
 */

#include <rtthread.h>
#include <rtdevice.h>
#include <board.h>

#include "mpu6xxx.h"
#include "kalman/kalman.h"

/* Default configuration, please change according to the actual situation, support i2c and spi device name */
#define MPU6XXX_DEVICE_NAME  "i2c1"

int main(void)
{
    struct mpu6xxx_device *dev;
    struct mpu6xxx_3axes accel, gyro;
    struct kalman_t kalmanX, kalmanY;
    float gyroXangle, gyroYangle; // Angle calculate using the gyro only
    float compAngleX, compAngleY; // Calculated angle using a complementary filter
    float kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
    uint32_t timer = 0;
    float dt;
    int i;

    /* Initialize mpu6xxx, The parameter is RT_NULL, means auto probing for i2c*/
    dev = mpu6xxx_init(MPU6XXX_DEVICE_NAME, RT_NULL);

    if (dev == RT_NULL)
    {
        rt_kprintf("mpu6xxx init failed\n");
        return -1;
    }
    rt_kprintf("mpu6xxx init succeed\n");

    /* Set kalman and gyro starting angle */
    kalmanInit(&kalmanX, 0.001, 0.0, 0.003);
    kalmanInit(&kalmanY, 0.001, 0.0, 0.003);
    mpu6xxx_get_accel(dev, &accel);
    float roll = atan2(accel.y, accel.z) * 57.3;
    float pitch = atan(-accel.x / sqrt(accel.y * accel.y + accel.z * accel.z)) * 57.3;
    // set starting angle
    kalmanX.angle = roll;
    kalmanY.angle = pitch;
    gyroXangle = roll;
    gyroYangle = pitch;
    compAngleX = roll;
    compAngleY = pitch;

    // get time
    timer = rt_tick_get();

    while(1)
    {
        mpu6xxx_get_accel(dev, &accel);
        mpu6xxx_get_gyro(dev, &gyro);

        dt = (double)(rt_tick_get() - timer) / RT_TICK_PER_SECOND;
        timer = rt_tick_get();

        // Source: http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf eq. 25 and eq. 26
        // atan2 outputs the value of -π to π (radians) - see http://en.wikipedia.org/wiki/Atan2
        // It is then converted from radians to degrees
        float roll = atan2(accel.y, accel.z) * 57.3;
        float pitch = atan(-accel.x / sqrt(accel.y * accel.y + accel.z * accel.z)) * 57.3;
        // convert gyro raw to degrees per second
        float gyroXrate = gyro.x / 131.0;
        float gyroYrate = gyro.y / 131.0;
        // This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
        if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90))
        {
            kalmanX.angle = roll;
            compAngleX = roll;
            kalAngleX = roll;
            gyroXangle = roll;
        }
        else
            kalAngleX = kalmanGetAngle(&kalmanX, roll, gyroXrate, dt);
        
        if (abs(kalAngleX) > 90)
            gyroYrate = -gyroYrate; // Invert rate, so it fits the restriced accelerometer reading
        kalAngleY = kalmanGetAngle(&kalmanY, pitch, gyroYrate, dt);

        // gyro angle calculations
        gyroXangle += gyroXrate * dt; // Calculate gyro angle without any filter
        gyroYangle += gyroYrate * dt;

        // Calculate the angles from the gyro
        compAngleX = 0.93 * (compAngleX + gyroXrate * dt) + 0.07 * roll; // Calculate the angle using a Complimentary filter
        compAngleY = 0.93 * (compAngleY + gyroYrate * dt) + 0.07 * pitch;

        // Reset the gyro angle when it has drifted too much
        if (gyroXangle < -180 || gyroXangle > 180)
            gyroXangle = kalAngleX;
        if (gyroYangle < -180 || gyroYangle > 180)
            gyroYangle = kalAngleY;
        
        rt_kprintf("accel.x = %3d, accel.y = %3d, accel.z = %3d ", accel.x, accel.y, accel.z);
        rt_kprintf("gyro.x = %3d gyro.y = %3d, gyro.z = %3d\n", gyro.x, gyro.y, gyro.z);
        rt_kprintf("roll = %3d, pitch = %3d, yaw = %3d\n", (int)roll, (int)pitch, (int)0);
        rt_kprintf("kalAngleX = %3d, kalAngleY = %3d\n", (int)kalAngleX, (int)kalAngleY);
        rt_kprintf("gyroXangle = %3d, gyroYangle = %3d\n", (int)gyroXangle, (int)gyroYangle);
        rt_kprintf("compAngleX = %3d, compAngleY = %3d\n", (int)compAngleX, (int)compAngleY);

        rt_thread_mdelay(2);
    }

    mpu6xxx_deinit(dev);

    return 0;
}
